const { Markup } = require('telegraf');

module.exports = (bot, showMainMenu, ADMIN_CHAT_ID) => {
    const waitingForBirthDate = new Set();

    bot.hears('üßõ –¢–µ—Å—Ç –Ω–∞ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–∞–º–ø–∏—Ä–∞', async (ctx) => {
        try {
            waitingForBirthDate.add(ctx.chat.id);
            
            await ctx.reply(
                'üìÖ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n–ù–∞–ø—Ä–∏–º–µ—Ä: 15.05.1990',
                Markup.keyboard([
                    ['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ—Å—Ç']
                ])
                .resize()
                .oneTime()
            );
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞:', err);
            await showMainMenu(ctx);
        }
    });

    bot.hears('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ—Å—Ç', async (ctx) => {
        waitingForBirthDate.delete(ctx.chat.id);
        await ctx.reply('‚ùå –¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ë–Ω');
        await showMainMenu(ctx);
    });

    bot.on('text', async (ctx) => {
        if (!waitingForBirthDate.has(ctx.chat.id)) return;
        
        const birthDate = ctx.message.text.trim();
        
        try {
            if (!/^\d{2}\.\d{2}\.\d{4}$/.test(birthDate)) {
                return ctx.reply('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–∞–∫ –î–î.–ú–ú.–ì–ì–ì–ì\n–ù–∞–ø—Ä–∏–º–µ—Ä: 01.01.2000');
            }

            const [day, month, year] = birthDate.split('.').map(Number);
            const dateObj = new Date(year, month - 1, day);
            
            if (isNaN(dateObj.getTime()) || 
                dateObj.getDate() !== day || 
                dateObj.getMonth() !== month - 1) {
                return ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞');
            }

            const sum = day + month + year;
            const result = sum % 7;
            
            let status, emoji, advice;
            if (result <= 2) {
                status = '–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –≤–∞–º–ø–∏—Ä';
                emoji = 'üßõ';
                advice = '–í–∞–º —Å—Ç–æ–∏—Ç –æ–∫—Ä—É–∂–∞—Ç—å —Å–µ–±—è –¥–æ–Ω–æ—Ä–∞–º–∏ —ç–Ω–µ—Ä–≥–∏–∏';
            } else if (result <= 4) {
                status = '–ù–µ–π—Ç—Ä–∞–ª';
                emoji = '‚öñÔ∏è';
                advice = '–í—ã —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç–µ –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –æ—Ç–¥–∞—á–µ–π –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ–º —ç–Ω–µ—Ä–≥–∏–∏';
            } else {
                status = '–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –¥–æ–Ω–æ—Ä';
                emoji = 'üí´';
                advice = '–£—á–∏—Ç–µ—Å—å –∑–∞—â–∏—â–∞—Ç—å —Å–≤–æ—é —ç–Ω–µ—Ä–≥–∏—é –æ—Ç –≤–∞–º–ø–∏—Ä–æ–≤';
            }

            await ctx.replyWithMarkdown(
                `*${emoji} –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞:*\n\n` +
                `‚ñ´Ô∏è –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${birthDate}\n` +
                `‚ñ´Ô∏è –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–µ —á–∏—Å–ª–æ: ${result}\n` +
                `‚ñ´Ô∏è –í–∞—à —Ç–∏–ø: *${status}*\n\n` +
                `_${advice}_`
            );

            if (ADMIN_CHAT_ID) {
                await bot.telegram.sendMessage(
                    ADMIN_CHAT_ID,
                    `üßõ –ù–æ–≤—ã–π —Ç–µ—Å—Ç –æ—Ç @${ctx.from.username || ctx.from.id}\n` +
                    `–î–∞—Ç–∞: ${birthDate}\n` +
                    `–†–µ–∑—É–ª—å—Ç–∞—Ç: ${status}`
                ).catch(e => console.error('–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞:', e));
            }

            setTimeout(async () => {
                try {
                    await showMainMenu(ctx);
                } catch (err) {
                    console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é:', err);
                }
            }, 2000);

        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ—Å—Ç–∞:', err);
            await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–∞—Ö');
        } finally {
            waitingForBirthDate.delete(ctx.chat.id);
        }
    });
};